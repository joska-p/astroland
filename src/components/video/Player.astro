---
type Props = {
  url: string
  thumbnail: string
}

const { url, thumbnail } = Astro.props
---

<style>
  .timeline::before {
    right: calc(100% - var(--preview-position) * 100%);
  }

  .timeline::after {
    right: calc(100% - var(--progress-position) * 100%);
  }
</style>

<div
  class="group/video relative isolate grid w-full grid-cols-1 grid-rows-1 shadow-2xl"
  data-volume-level="high"
  id="video-container"
>
  <div
    class="z-10 col-span-full row-span-full mt-auto origin-bottom opacity-0 transition-opacity duration-300 ease-in-out focus-within:opacity-100 group-hover/video:opacity-100"
  >
    <button
      type="button"
      ref={timelineRef}
      class="group/timeline flex h-2 w-full cursor-pointer items-center px-2"
      onMouseMove={handleTimelineUpdate}
      onClick={handleJumTo}
      onKeyDown={handleTimelineKeyboard}
    >
      <div
        class="timeline relative h-1 w-full bg-gray-400/50 before:absolute before:bottom-0 before:left-0 before:top-0 before:hidden before:bg-gray-400 before:content-[''] after:absolute after:bottom-0 after:left-0 after:top-0 after:bg-red-600 after:content-[''] group-hover/timeline:before:block"
      >
      </div>
    </button>

    <div id="volume-control" class="flex items-center gap-2 bg-gray-50/80 p-1">
      <button type="button" class="h-8 w-8" onClick={togglePause}>
        {
          isPause ? (
            <svg viewBox="0 0 24 24">
              <path fill="currentColor" d="M8,5.14V19.14L19,12.14L8,5.14Z" />
            </svg>
          ) : (
            <svg viewBox="0 0 24 24">
              <path fill="currentColor" d="M14,19H18V5H14M6,19H10V5H6V19Z" />
            </svg>
          )
        }
      </button>

      <div class="group/volume flex items-center">
        <button type="button" class="h-8 w-8" onClick={toggleMute}>
          {
            volumeStatus === "high" && (
              <svg class="volume-high-icon" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z"
                />
              </svg>
            )
          }

          {
            volumeStatus === "low" && (
              <svg class="volume-low-icon" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  d="M5,9V15H9L14,20V4L9,9M18.5,12C18.5,10.23 17.5,8.71 16,7.97V16C17.5,15.29 18.5,13.76 18.5,12Z"
                />
              </svg>
            )
          }

          {
            volumeStatus === "muted" && (
              <svg class="volume-muted-icon" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  d="M12,4L9.91,6.09L12,8.18M4.27,3L3,4.27L7.73,9H3V15H7L12,20V13.27L16.25,17.53C15.58,18.04 14.83,18.46 14,18.7V20.77C15.38,20.45 16.63,19.82 17.68,18.96L19.73,21L21,19.73L12,10.73M19,12C19,12.94 18.8,13.82 18.46,14.64L19.97,16.15C20.62,14.91 21,13.5 21,12C21,7.72 18,4.14 14,3.23V5.29C16.89,6.15 19,8.83 19,12M16.5,12C16.5,10.23 15.5,8.71 14,7.97V10.18L16.45,12.63C16.5,12.43 16.5,12.21 16.5,12Z"
                />
              </svg>
            )
          }
        </button>

        <input
          ref={volumeSliderRef}
          class="w-0 origin-left scale-x-0 transition duration-150 ease-in-out group-focus-within/volume:w-24 group-focus-within/volume:scale-x-100 group-hover/volume:w-24 group-hover/volume:scale-x-100"
          type="range"
          min="0"
          max="1"
          step={0.1}
          onInput={changeVolume}
        />
      </div>

      <div class="flex flex-grow items-center gap-1">
        <div ref={currentTimeRef}>0:00</div>
        /
        <div ref={totalTimeRef}></div>
      </div>

      <button ref={speedButtonRef} type="button" class="h-8 w-8" onClick={changePlaybackSpeed}> 1x </button>

      <button type="button" class="h-8 w-8" onClick={toggleFullScreenMode}>
        {
          screenState === "fullscreen" ? (
            <svg class="close" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"
              />
            </svg>
          ) : (
            <svg class="open" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"
              />
            </svg>
          )
        }
      </button>
    </div>
  </div>

  <video
    poster={thumbnail}
    ref={videoRef}
    src={url}
    class="col-span-full row-span-full w-full object-cover"
    onLoadedData={handleOnLoadData}
    onTimeUpdate={handleOnTimeUpdate}
    onVolumeChange={handleOnVolumeChange}
    preload="metadata"></video>
</div>

<script>
  const videoContainerRef = useRef<HTMLDivElement>(null)
  const videoRef = useRef<HTMLVideoElement>(null)
  const timelineRef = useRef<HTMLButtonElement>(null)
  const totalTimeRef = useRef<HTMLDivElement>(null)
  const currentTimeRef = useRef<HTMLDivElement>(null)
  const speedButtonRef = useRef<HTMLButtonElement>(null)
  const volumeSliderRef = useRef<HTMLInputElement>(null)

  const [isPause, setIsPause] = useState(true)
  const [volumeStatus, setVolumeStatus] = useState<"high" | "low" | "muted">("high")
  const [screenState, setScreenState] = useState<"fullscreen" | "normal">("normal")

  // Play / Pause
  const togglePause = useCallback(() => {
    if (videoRef.current) {
      if (isPause) {
        setIsPause(false)
        videoRef.current.play()
      } else {
        setIsPause(true)
        videoRef.current.pause()
      }
    }
  }, [isPause])

  useEffect(() => {
    const currentVideo = videoRef.current
    if (currentVideo) currentVideo.addEventListener("click", togglePause)

    return () => {
      if (currentVideo) currentVideo.removeEventListener("click", togglePause)
    }
  }, [togglePause])

  // Timeline
  const handleTimelineUpdate = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    if (timelineRef.current) {
      const percent = getXPositionInPercent({
        element: timelineRef.current,
        mouseX: event.clientX,
      })
      console.log(percent)
      timelineRef.current.style.setProperty("--preview-position", percent.toString())
    }
  }

  const handleJumTo = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    if (timelineRef.current && videoRef.current) {
      const percent = getXPositionInPercent({
        element: timelineRef.current,
        mouseX: event.clientX,
      })
      videoRef.current.currentTime = percent * videoRef.current.duration

      handleTimelineUpdate(event)
    }
  }

  function skip(duration: number) {
    if (videoRef.current) videoRef.current.currentTime += duration
  }

  // Duration
  const handleOnLoadData = () => {
    if (totalTimeRef.current && videoRef.current)
      totalTimeRef.current.textContent = formatDuration(videoRef.current.duration)
  }

  const handleOnTimeUpdate = () => {
    if (currentTimeRef.current && videoRef.current && timelineRef.current) {
      currentTimeRef.current.textContent = formatDuration(videoRef.current.currentTime)
      const percent = videoRef.current.currentTime / videoRef.current.duration
      timelineRef.current.style.setProperty("--progress-position", percent.toString())
    }
  }

  // Playback Speed
  const changePlaybackSpeed = () => {
    if (videoRef.current && speedButtonRef.current) {
      let newPlaybackRate = videoRef.current.playbackRate + 0.25
      if (newPlaybackRate > 2) newPlaybackRate = 0.25
      videoRef.current.playbackRate = newPlaybackRate
      speedButtonRef.current.textContent = `${newPlaybackRate}x`
    }
  }

  // Volume
  const toggleMute = () => {
    if (videoRef.current) videoRef.current.muted = !videoRef.current.muted
  }

  const changeVolume = (event: React.FormEvent<HTMLInputElement>) => {
    if (videoRef.current) {
      videoRef.current.volume = parseFloat(event.currentTarget.value)
      videoRef.current.muted = parseFloat(event.currentTarget.value) === 0
    }
  }

  const handleOnVolumeChange = () => {
    if (volumeSliderRef.current && videoRef.current) {
      volumeSliderRef.current.value = videoRef.current.volume.toString()

      if (videoRef.current.muted || videoRef.current.volume === 0) {
        volumeSliderRef.current.value = "0"
        setVolumeStatus("muted")
      } else if (videoRef.current.volume >= 0.5) {
        setVolumeStatus("high")
      } else {
        setVolumeStatus("low")
      }
    }
  }

  // View Modes
  const toggleFullScreenMode = () => {
    if (videoContainerRef.current) {
      if (document.fullscreenElement == null) {
        videoContainerRef.current.requestFullscreen()
        setScreenState("fullscreen")
      } else {
        document.exitFullscreen()
        setScreenState("normal")
      }
    }
  }

  // Keyboard navigation
  const handleTimelineKeyboard = (event: KeyboardEvent<HTMLButtonElement>) => {
    switch (event.key.toLowerCase()) {
      case " ":
        togglePause()
        break
      case "arrowleft":
        skip(-5)
        break
      case "arrowright":
        skip(5)
        break
      default:
        break
    }
  }
</script>
