---
/**TODO :
 * - the link are hard prefixed. I need to find a way to get the base url.
 *
 */
import type { Page } from "astro"
import type { CollectionEntry } from "astro:content"

interface Props {
  page: Page<CollectionEntry<"painting">>
}

const { page } = Astro.props
const pageNums = Array.from({ length: page.lastPage }, (_, i) => i + 1)
---

{
  page.lastPage > 1 && (
    <nav role="navigation" aria-label="Pagination Navigation" class="row flex justify-center">
      {page.url.prev && (
        <a
          href={`/astroland${page.url.prev}`}
          aria-label="Goto Previous Page"
          class="rounded-md rounded-r-none border border-r-0 border-slate-300 py-2 px-3 text-center text-sm transition-all shadow-sm hover:shadow-lg text-slate-600 hover:text-slate-50 hover:bg-slate-800 hover:border-slate-800 focus:text-slate-50 focus:bg-slate-800 focus:border-slate-800 active:border-slate-800 active:text-slate-50 active:bg-slate-800 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
          type="button"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="w-4 h-4"
          >
            <path
              fill-rule="evenodd"
              d="M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z"
              clip-rule="evenodd"
            />
          </svg>
        </a>
      )}
      {pageNums.map((num) => {
        const isCurrent = num === page.currentPage
        const ariaLabel = isCurrent ? `Current page, page ${num}` : `Goto Page ${num}`
        return (
          <a
            href={`/astroland/painting/${num === 1 ? "" : num}`}
            aria-label={ariaLabel}
            aria-current={isCurrent}
            class="hidden md:inline aria-[current=true]:text-slate-50 aria-[current=true]:bg-slate-800 aria-[current=true]:border-slate-800 rounded-md rounded-r-none rounded-l-none border border-r-0 border-slate-300 py-2 px-3 text-center text-sm transition-all shadow-sm hover:shadow-lg text-slate-600 hover:text-slate-50 hover:bg-slate-800 hover:border-slate-800 focus:text-slate-50 focus:bg-slate-800 focus:border-slate-800 active:border-slate-800 active:text-slate-50 active:bg-slate-800 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
            type="button"
          >
            {num}
          </a>
        )
      })}
      {page.url.next && (
        <a
          href={`/astroland${page.url.next}`}
          aria-label="Goto Next Page"
          class="rounded-md rounded-l-none border border-slate-300 py-2 px-3 text-center text-sm transition-all shadow-sm hover:shadow-lg text-slate-600 hover:text-slate-50 hover:bg-slate-800 hover:border-slate-800 focus:text-slate-50 focus:bg-slate-800 focus:border-slate-800 active:border-slate-800 active:text-slate-50 active:bg-slate-800 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
          type="button"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="w-4 h-4"
          >
            <path
              fill-rule="evenodd"
              d="M12.97 3.97a.75.75 0 0 1 1.06 0l7.5 7.5a.75.75 0 0 1 0 1.06l-7.5 7.5a.75.75 0 1 1-1.06-1.06l6.22-6.22H3a.75.75 0 0 1 0-1.5h16.19l-6.22-6.22a.75.75 0 0 1 0-1.06Z"
              clip-rule="evenodd"
            />
          </svg>
        </a>
      )}
    </nav>
  )
}
