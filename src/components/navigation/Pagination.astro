---
import type { Page } from "astro"

interface Props {
  page: Page
}

const { page } = Astro.props
const pageNums = Array.from({ length: page.lastPage }, (_, i) => i + 1)
const baseUrl = import.meta.env.BASE_URL
const pageName = page.url.current.split("/")[1]
---

{
  page.lastPage > 1 && (
    <nav role="navigation" id="pagination" aria-label="Pagination Navigation" class="flex justify-center">
      {page.url.prev && (
        <a
          href={baseUrl.slice(0, -1) + page.url.prev}
          aria-label="Goto Previous Page"
          title="Goto Previous Page"
          class="border border-r-0 border-gray-300 px-3 py-2 text-center text-sm text-gray-600 shadow-sm transition-all hover:border-gray-800 hover:bg-gray-800 hover:text-gray-50 hover:shadow-lg focus:border-gray-800 focus:bg-gray-800 focus:text-gray-50 active:border-gray-800 active:bg-gray-800 active:text-gray-50 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
          type="button"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4">
            <path
              fill-rule="evenodd"
              d="M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z"
              clip-rule="evenodd"
            />
          </svg>
        </a>
      )}
      {pageNums.map(num => {
        const isCurrent = num === page.currentPage
        const ariaLabel = isCurrent ? `Current page, page ${num} of ${page.lastPage}` : `Goto Page ${num}`
        return (
          <a
            href={baseUrl + pageName + "/" + num + "/"}
            aria-label={ariaLabel}
            aria-current={isCurrent ? "page" : "false"}
            title={ariaLabel}
            class="rounded-md rounded-l-none rounded-r-none border border-r-0 border-gray-300 px-3 py-2 text-center text-sm text-gray-600 shadow-sm transition-all hover:border-gray-800 hover:bg-gray-800 hover:text-gray-50 hover:shadow-lg focus:border-gray-800 focus:bg-gray-800 focus:text-gray-50 active:border-gray-800 active:bg-gray-800 active:text-gray-50 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none aria-[current=false]:hidden aria-[current=page]:border-gray-800 aria-[current=page]:bg-gray-800 aria-[current=page]:text-gray-50 md:aria-[current=false]:inline"
            type="button"
          >
            {num}
          </a>
        )
      })}
      {page.url.next && (
        <a
          href={baseUrl.slice(0, -1) + page.url.next}
          aria-label="Goto Next Page"
          title="Goto Next Page"
          class="border border-gray-300 px-3 py-2 text-center text-sm text-gray-600 shadow-sm transition-all hover:border-gray-800 hover:bg-gray-800 hover:text-gray-50 hover:shadow-lg focus:border-gray-800 focus:bg-gray-800 focus:text-gray-50 active:border-gray-800 active:bg-gray-800 active:text-gray-50 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
          type="button"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4">
            <path
              fill-rule="evenodd"
              d="M12.97 3.97a.75.75 0 0 1 1.06 0l7.5 7.5a.75.75 0 0 1 0 1.06l-7.5 7.5a.75.75 0 1 1-1.06-1.06l6.22-6.22H3a.75.75 0 0 1 0-1.5h16.19l-6.22-6.22a.75.75 0 0 1 0-1.06Z"
              clip-rule="evenodd"
            />
          </svg>
        </a>
      )}
    </nav>
  )
}
