---
import type { GetStaticPaths } from "astro"
import { getCollection } from "astro:content"
import Layout from "#layouts/Layout.astro"
import Pagination from "#widgets/Pagination.astro"
import Single from "#components/painting/Single.astro"

export const getStaticPaths = (async ({ paginate }) => {
  const paintings = (await getCollection("painting")).sort((a, b) => b.data.year.valueOf() - a.data.year.valueOf())

  return paginate(paintings, { pageSize: 25 })
}) satisfies GetStaticPaths

const { page } = Astro.props
---

<Layout title={`Peinture. Page ${page.currentPage} of ${page.lastPage}. - Roland Potin Eizner.`}>
  <section class="container mx-auto h-full space-y-20">
    <h1 id="debut-de-la-visite" class="anchor snap-start pt-5 text-center text-2xl font-bold md:pt-10 lg:text-3xl">
      Bienvenue dans ma gallerie <small class="text-md block font-normal"
        >page {page.currentPage} sur {page.lastPage}</small
      >
    </h1>
    {
      page.data.map(painting => {
        const isLastItem = page.data.indexOf(painting) === page.data.length - 1
        return (
          <Single painting={painting.data}>
            {isLastItem && (
              <footer class="col-span-full mt-8">
                <Pagination page={page} />
              </footer>
            )}
          </Single>
        )
      })
    }
  </section>
</Layout>

<script>
  /**
   * When a anchor is visible in the viewport, the URL is updated with the anchor's id.
   */
  document.addEventListener("astro:page-load", () => {
    const scrollArea = document.querySelector<HTMLDivElement>("#scroll-area")
    const observerOptions: IntersectionObserverInit = {
      threshold: 0.5,
      rootMargin: "0px",
      root: scrollArea,
    }
    const observer = new IntersectionObserver(handleIntersection, observerOptions)

    const anchors = document.querySelectorAll(".anchor")
    anchors.forEach(anchor => observer.observe(anchor))
  })

  function handleIntersection(entries: IntersectionObserverEntry[]) {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const { pathname } = new URL(location.href)
        const id = entry.target.id
        history.replaceState(null, "", `${pathname.replace(/\/$/, "")}/#${id}`)
      }
    })
  }
</script>
