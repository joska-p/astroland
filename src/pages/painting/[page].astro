---
import type { GetStaticPaths } from "astro"
import { getCollection } from "astro:content"
import Root from "../../components/layout/Root.astro"
import Pagination from "../../components/navigation/Pagination.astro"
import Single from "../../components/painting/Single.astro"

export const getStaticPaths = (async ({ paginate }) => {
  const paintings = (await getCollection("painting")).sort(
    (a, b) => b.data.year.valueOf() - a.data.year.valueOf()
  )

  return paginate(paintings, { pageSize: 10 })
}) satisfies GetStaticPaths

const { page } = Astro.props
---

<Root title={`Peinture. Page ${page.currentPage} of ${page.lastPage}. - Roland Potin Eizner.`}>
  <section
    id="scrollArea"
    class="container space-y-[50%] mx-auto overflow-y-scroll motion-reduce:scroll-smooth snap-y snap-mandatory h-[calc(100svh-var(--header-height)-var(--footer-height))]"
  >
    {
      page.data.map((painting) => {
        const isLastItem = page.data.indexOf(painting) === page.data.length - 1
        return (
          <Single painting={painting.data}>
            {isLastItem && (
              <footer class="col-span-full mt-8">
                <Pagination page={page} />
              </footer>
            )}
          </Single>
        )
      })
    }
  </section>
</Root>

<script>
  const updateHash = (element: HTMLDivElement) => {
    const url = new URL(location.href)
    const id = element.id
    history.replaceState(null, "", url.pathname + "#" + id)
  }

  const show = (element: HTMLDivElement) => {
    element.classList.remove("opacity-0")
  }

  const hide = (element: HTMLDivElement) => {
    element.classList.add("opacity-0")
  }

  document.addEventListener("astro:page-load", () => {
    const articles = document.querySelectorAll("article")
    const observerOptions = {
      threshold: 0.5,
      rootMargin: "0px 0px 0px 0px",
      root: document.querySelector("#scrollArea"),
    }
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          updateHash(entry.target as HTMLDivElement)
          show(entry.target as HTMLDivElement)
        } else {
          hide(entry.target as HTMLDivElement)
        }
      })
    }, observerOptions)

    articles.forEach((painting) => {
      observer.observe(painting)
    })
  })
</script>
